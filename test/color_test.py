#!/usr/bin/env python3

#
# Nova Labs space_switch
# This script handles the hardware space switch and updating the state in the Nova Labs Event Service.  Toggling the
# physical switch updates the Event Service with the update state and changes the physical LEDs.  The LEDs indicate the
# current state.
#
# LED indicator
# ----------------------------
# all grey            - startup
# all green           - OPEN
# all red             - CLOSED
# 2nd half grey       - changing state, updating Event Service
# 2nd half dark green - Event Service updated to open, waiting for pull from Event Service to confirm
# 2nd half dark red   - Event Service updated to closed, waiting for pull from Event Service to confirm
# 2nd half yellow     - error updating or pulling from Event Service
#
# The Event Service is a simple RESTful service for adding and retrieving events.  An event has a type, value, time,
# and UUID.  The UUID is generated by the Event Service.
#
#

#import network, requests, json, time, math
import requests, json, time, math, logging
import signal
import sys
#from machine import Pin
import RPi.GPIO as GPIO
import board
import neopixel

SWITCH_ONE_GPIO = 22
SWITCH_TWO_GPIO = 27

# LED strip configuration:
LED_COUNT = 10  # Number of LED pixels.
ORDER = neopixel.GRB
pixel_pin = board.D18

PIXEL_ALL = list(range(LED_COUNT))
PIXEL_HALF = math.floor(LED_COUNT/2)
PIXEL_75_PCT = math.floor(LED_COUNT*.75)
PIXEL_FIRST_ONE = list(range(0, 0))
PIXEL_FIRST_HALF = list(range(1, PIXEL_75_PCT))
PIXEL_SECOND_HALF = list(range(PIXEL_75_PCT, LED_COUNT))

RED        = (255, 0, 0)
RED_DARK   = (50, 0, 0)
GREEN      = (0, 255, 0)
GREEN_DARK = (0, 50, 0)
BLUE       = (0, 0, 255)
BLUE_DARK  = (0, 0, 50)
ORANGE      = (110, 60, 0)
ORANGE_DARK = (90, 45, 0)
YELLOW     = (255, 255, 0)
GREY       = (50, 50, 50)
GREY_DARK  = (20, 20, 20)
OFF        = (0, 0, 0)


# Define functions which animate LEDs in various ways.
def colorWipe(strip, color, wait_ms=50):
    """Wipe color across display a pixel at a time."""
    for i in range(strip.n):
        strip[i] = color
        strip.show()
        time.sleep(wait_ms / 1000.0)


#
# shine all pixels this color
#
def shine_all(color):
    colorWipe(strip, color)
    strip.show()


#
# shine second half of the LEDs to this color
#
def shine_second_half(color):
    for i in PIXEL_SECOND_HALF:
        strip[i] = color
    strip.show()


#
# shine every other pixel to this color
#
def shine_alternate(color):
    for i in range(LED_COUNT)[::2]:
        strip[i] = color
    strip.show()


# turn all green to indicate Event Service latest event is open
def shine_open():
    shine_all(GREEN)


# turn all red to indicate Event Service latest event is closed
def shine_closed():
    shine_all(RED)


# turn all red to indicate Event Service latest event is closed
def shine_associate():
    shine_all(ORANGE)


# change LEDs to reflect Event Service updated with new state, waiting to confirm by fetching event from Event Service
def shine_updated_open():
    shine_second_half(GREEN_DARK)


# change LEDs to reflect Event Service updated with new state, waiting to confirm by fetching event from Event Service
def shine_updated_closed():
    shine_second_half(RED_DARK)


# change LEDs to reflect Event Service updated with new state, waiting to confirm by fetching event from Event Service
def shine_updated_associate():
    shine_second_half(ORANGE_DARK)


# change LEDs to yellow to indicate error
def shine_error():
    shine_second_half(YELLOW)


# change LEDs to indicate pending update to Event Service
def shine_changing_state():
    shine_second_half(GREY)


# turn all grey on boot
def shine_boot():
    shine_all(GREY_DARK)


# turn off all LEDs
def shine_off():
    shine_all(OFF)


# setup NeoPixel
strip = neopixel.NeoPixel(pixel_pin, LED_COUNT, brightness=0.2, auto_write=False, pixel_order=ORDER)

shine_boot()
time.sleep(1)

print("1")
shine_changing_state()
time.sleep(1)

print("2")
shine_updated_closed()
time.sleep(1)

print("3")
shine_closed()
time.sleep(1)

print("4")
shine_changing_state()
time.sleep(1)

print("5")
shine_updated_open()
time.sleep(1)

print("6")
shine_open()
time.sleep(1)

print("7")
shine_updated_associate()
time.sleep(1)

print("8")
shine_associate()
time.sleep(1)

print("9")
shine_updated_open()
time.sleep(1)

print("10")
shine_off()
